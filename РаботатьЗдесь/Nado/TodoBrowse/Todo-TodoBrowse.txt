

21 декабря 2021
Цель проекта: Повысить скорость исполнения проектов.

1. Находить в текстах внутри проектов и различных файлов задачи, помеченные тегами тодо и показывать их пользователю в одном списке.
   Чтобы пользователь не терял из виду задачи, разбросанные по разным папкам проектов.
   Сведение их в один список должно немного помочь с исполнением задач и, следовательно, продвижением проектов.
2. Находить в текстах внутри проектов и различных файлов вхождения слова "надо", и показывать их пользователю в одном списке.   
   Этим словом обычно отмечаются задачи, и часто эти задачи не оформлены в теги тодо-задач.
   Сведение их в один список должно ускорить переработку этих записей в тодо-задачи, которые потом можно будет исполнять.

Способ применения приложения:
1. Запускаем приложение с целью найти надо-задачи.
2. Указываем папку, в которой будем искать задачи. Очевидно, это должна быть папка проекта.
3. Приложение выводит нам список надо-задач.
4. Вручную просматриваем файлы и превращаем надо-задачи в тодо-задачи, переформулируя их прямо в тексте документа и расставляя тодо-теги.
5. отдыхаем от этой работы.

6. Запускаем приложение с целью найти тодо-задачи.
7. Указываем папку, в которой будем искать задачи. Очевидно, это должна быть папка проекта.
8. Приложение выводит нам список тодо-задач.
9. Просматриваем список и выбираем тодо-задачу для исполнения. 
10. После исполнения тодо-задачи изменяем тег и описание тодо-задачи прямо в тексте документа, помечая задачу выполненной.
11. отдыхаем от этой работы.


Реализация:
- Изготовить приложение для:
  1. Выборки всех вхождений тегов задач из файлов в указанной папке.
    И отображение их в окне приложения.
  2. Экспорта списка тодо-задач в формат TXT
  3. Экспорта списка тодо-задач в формат RTF
  4. Экспорта списка тодо-задач в формат HTML
  5. Экспорта списка тодо-задач в формат LittleTasks
  6. Выборки всех вхождений слова надо из файлов в указанной папке.
    И отображение их в окне приложения.
  7. Экспорта списка вхождений "надо" в формат TXT
  8. Экспорта списка вхождений "надо" в формат RTF
  9. Экспорта списка вхождений "надо" в формат HTML
- механизм извлечения задач из файлов должен быть вынесен в отдельную сборку для его возможного использования в последующих проектах.  

Идеи для дополнения:
- запоминание 10 последних открытых каталогов и показ их в меню Файл.


Список задач по разработке приложения:
+ добавлен код вывода на статус-бар текстов и прогресса процесса.
+ добавлен код открытия файлов при клике по ссылке
+ добавлен показ сообщения об ошибке при ошибке при клике по ссылке.
+ добавить процедуру поиска тодо-задач 
+ добавить процедуру поиска вхождений надо.
- добавить экспорт данных в файл.
  - выбор выходного формата определяется выбором пользователем типа файла в диалоге Save as:
  - добавить процедуру экспорта содержимого главного окна в  формат TXT
  - добавить процедуру экспорта содержимого главного окна в  формат RTF
  - добавить процедуру экспорта содержимого главного окна в  формат HTML  
+ Добавить файл настроек приложения
+ добавить в файл настроек приложения поле для последнего открытого каталога.
+ добавить в файл настроек приложения поле хранения расширений просматриваемых файлов.
  - одно и то же для процессов поиска тодо и надо.
+ добавить в файл настроек приложения поле хранения текста тегов тодо.
+ добавить в файл настроек приложения поле текста тегов надо.
- или добавить диалог редактирования всех настроек PropertyGrid.
	- добавить форму для редактирования списка расширений просматриваемых файлов.
	- добавить форму для редактирования списка тегов тодо.
	- добавить форму для редактирования списка тегов надо.
- добавить файл справки.
+ добавить диалог О программе.
- изменить текстовые сообщения для большего соответствия стилю процесса.
+ добавить акселераторы в меню.
- добавить иконки в меню
- выполнить тестирование на реальных объемах данных.
  - устранить все недочеты приложения.
- собрать релиз для инсталлятора.
- сделать инсталлятор для быстрой установки приложения.
- добавить и исправить теги документации кода везде.
- скопировать незавершенные задачи из документации проекта сюда в конец тодо-файла,
  чтобы можно было быстро понять, что еще не сделано в проекте.
  
  
21 декабря 2021
+ Сейчас приложение можно уже использовать для поиска задач в проектах.
+ релиз приложения разместить в папке МоиИнструменты на рабочем столе.
+ сделан процесс поиска тодо-задач.
+ сделан процесс вывода на экран тодо-задач.
+ сделан процесс перехода на файл по клику.
  + но вики-страницы не открываются нормально - открывается последняя открытая в вики страница.
    + сделано: 22 декабря.
    + Надо форматировать ссылку иначе - как в ярлыке на вики-страницу.
      То есть, надо определить расширение файла и для вики исправить ссылку в коде перед вызовом.
	  - но я не могу - нужен путь к файлу вики, а его не узнать из пути ссылки?
	    Есть: file:///C:/Users/Администратор/ЛокальныеПроекты/ПоискНадо/РаботатьЗдесь/NadoWiki/data/ЛогПроекта.wiki  
		Надо: file:///C:/Users/Администратор/ЛокальныеПроекты/ПоискНадо/РаботатьЗдесь/NadoWiki/NadoWiki.wiki?page=ЛогПроекта
		 Тут надо каталог перед data использовать как название файла и переработать все как надо. 
		 Это возможно, если ссылку на файл формировать не сразу в движке, а по месту, перед выводом в ричтекст контрол.
		DONE: исправить движок - не формировать ссылку, а вписывать путь к файлу.
		   - сделано 22 декабря
        DONE: исправить приложение: для каждой тодо-задачи формировать ссылку на файл согласно его расширению.
           Для вики-файлов формировать ссылку указанным выше способом.
           - сделано: 22 декабря. 
             Поскольку wiki:/// ссылки не обрабатываются нигде, кроме самого википада, то они выводятся в окно так же, как все остальные.
             Но при клике по ссылке проверяется ее расширение и ссылка переделывается в пригодную для вызова википада, затем передается в Process.Start().
             И в этом месте (функция private string Form1.makeSpecialLink(string link) )можно еще добавлять подобные обработчики, я оставил для них место.		
+ добавить к Найденные задачи: количество задач , пример Найденные задачи: 456 шт.
  - сделано 22 декабря.
- следует ли выводить done теги? Если их станет слишком много, среди них я не найду нерешенные задачи.
  - теги можно убрать из поиска через редактирование списка тегов в настройках. 
    - а будет ли это правильно для каждого использования программы? 
      TODO: Это надо решить после практического использования программы.
+ изменить заголовок формы на правильный.
  - сделано 22 декабря.
+ изменить иконку формы на подходящую.
  - сделано 22 декабря.	  

22 декабря
- TODO: переделать код формы - вынести сохранение файлов и формирование ссылок в класс-движок (можно в TodoLibrary),
  а форму приложения оставить только как пульт и файл настроек.
- TODO: перенести классы ивент-аргс в myCodeLibrary - так как они часто востребованы в других проектах.
- TODO: написать инструкцию по реализации вывода сообщений и прогресс-бара из движка в консоль или форму,
  как это сделано здесь. Чтобы быстро добавлять такие каналы сообщений в новых проектах.  

23 декабря 2021
+ реализовать функцию вывода надо-задачи в ричтекстбокс
  private void Form1.printNadoItems(TodoItemCollection col)
  - это так же, как тодо-задачу, только разделять их визуально, чтобы не путать границы. 
  + сделано 24122021
- в движке:
  - реализовать функцию public TodoItemCollection TodoEngine.getNadoItemsFromFile(string file)
     подобно коду функции public TodoItemCollection TodoEngine.getNadoItemsFromFolder(string file).
  + реализовать функцию private void makeNadoRegex(string[] tags)
    + переделать регекс, чтобы он выявлял надо-теги а не тодо-теги.
    + для этого надо составить список вариантов употребления слова надо в моих текстах и вообще в текстах.
      Чтобы регекс правильно обрабатывал слова типа "надоело надо-таки надо: надо? надо! надо."
       то есть, все варианты, когда надо.  
- исправить неожиданные проблемы с поиском тодо - для каждого файла выдает NullReferenceException.
  - это был какой-то глюк, на следующий день все нормально работает.
- я приготовил код для реализации функций вывода результатов поиска в файл.
  Теперь надо написать эти варианты выходных форматов.
+ ошибка: если закрыть окно выбора каталога для сканирования, вайт-курсор остается.
  Я забыл про эту ветвь выхода. Добавить надо и туда тоже. 
  + сделано 24122021 
+ регекс убрать из коллекции тодо-задач TodoItemCollection:
  + поле регекса убрать из коллекции TodoItemCollection
  + создание регекса перенести в функцию чтения файла. Он будет теперь создаваться для каждого файла, но это допустимо.
  - но хорошо бы, для порядка, все-таки создавать один регекс на все файлы. 
    - TODO: Отложить это пожелание на будущую переработку всего движка.
- надо написать в программе сохранение итемов в формат литтл-таск.
  - и поставить задачу: добавить в движок этот код чтения-записи формата файла задач литтл-таск,
  - и поставить задачу: перевести литтл-таск на использование движка этого проекта.
  - то есть, LittleTasks и TodoBrowse должны использовать сборку TodoLibrary.
    - значит, надо их свести в один солюшен, чтобы версии сборки TodoLibrary не путались потом.
      - но не объединять, так как у них разные функции и разные расклады окон. 
- надо в коде описать (документировать) заполнение объекта TodoItem в случае тодо-тегов и надо-тегов:
  Какие поля что содержат и каково их назначение, применение, какие ограничения для данных.
  Это чтобы позже можно было быстро понять, что там где искать и почему так реализовано все это.              
  Чтобы не запоминать сейчас и не вспоминать потом, что как и почему здесь.
- в конце работы надо убрать из проекта предыдущее приложение Nado.
  Оно лишнее теперь.
  - сначала надо проверить, что оба приложения выдают одинаковые результаты.
    Вдруг прилохение Nado находит и другие надо-задачи - как я без него это узнаю? 
  - еще нужен из него код вывода в файл - я пока это не реализовал тут.  
  
27 декабря 2021
+ реализовано сохранение в html-файл.  