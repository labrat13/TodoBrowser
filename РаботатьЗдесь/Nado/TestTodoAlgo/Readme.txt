
Цели этого проекта:
  1. Поиск Надо. Этими словами я часто описываю задачи, а отмечать их тегами тодо мне некогда бывает.
    - приложение для этого уже написано. Надо просматривать через него файлы и превращать эти случаи в тодо-задачи.
       Хотя это не убирает их из повторного поиска, в этом проблема метода.
  2. создать код поиска тодо для библиотеки классов.
    - и документировать его. 
    - он должен:
      - собирать тодо из текстов определенной области - папки, 
      - группировать их по классам, 
      - подсчитывать количество в каждом классе, 
      - выводить процент завершенности работ.                 
  3. опробовать код поиска тодо на моих файлах.
    - для этого надо написать приложение-браузер, подобное 1. 


Тест алгоритма извлечения тодо-тегов из текстовых файлов.
- в целом этот способ работает. Протестирован наскоро.
- но можно было реализовать его лучше, написав более сложный регекс. Он бы сразу и заголовок и контент выбирал, и все было бы проще.
  - но документации по регексам в моей экспресс мсдн - нет!
- загрузка образцов тегов не реализована, только тестовый набор тегов.
- надо бы сделать класс-коллекцию итемов, чтобы там их сортировать по классам и делать прочие мелкие работы.
Да и сам парсинг - тоже там, а не в классе итема. Одна коллекция на каждый исходный файл.

31 октября 2021г
- переделал код немного.
  - он все такой же кривой, но структура получше стала.
  - можно использовать в режиме Одна коллекция на файл: 
            //задаем список тегов - его обычно следует хранить в настройках приложения.
            string tags = "todo TODO done DONE question QUESTION надо НАДО тодо ТОДО вопрос ВОПРОС";
            //делаем выборку тодо-задач
            TodoItemCollection t = TodoItemCollection.Extract(srcFile, text, tags);
  - а можно использовать в режиме Одна коллекция на все файлы:
    - это вызывать для каждого файла функцию 
             public List<TodoItem> ExtractItems(string src, string text);         
- а дальше надо как-то представлять пользователю результаты найденные.
  - а тут пока ничего не придумано.
  - ссылка на файл и список тодо-итемов, их классы надо фильтровать через тулбар окна или через меню с галочками.
    И сортировать их по классам или показывать по порядку исходного файла? Тоже бы надо выбрать в настройках тулбара.
                
- надо добавить в коллекцию  код сортировки итемов по классам и подсчета их количества, и расчета процента завершенности работ, 
  чтобы следовать целям проекта (см начало документа).               

19 декабря 2021
- надо уже сделать эту утилиту, чтобы использовать ее для работы над проектами!
- общий алгоритм:
  - пользователь указывает папку проекта.
  - движок выбирает из указанной папки все файлы по расширениям. 
    Расширения для файлов должны храниться в настройках движка и загружаться в виде списка расширений при старте движка.
    - необходим файл настроек движка.
    - необходим класс Движка
    - необходимо поле Список расширений проверяемых файлов.
  - для каждого файла вызывается процедура анализа файла.
    - определяется кодировка файла
      - требуется к проекту подключить myCodeLibrary - там эта функция есть.   
    - определяется путь файла и формируется абсолютная ссылка на файл вида file:///
    - из текста выбираются вхождения todo-задач и собираются в объекты todo-задачи.
      - в объект задачи вписывается ссылка на файл-источник задачи
    - массив тодо-задач возвращается вызывающему коду.
  - массив добавляется в общий список задач
  - список задач сортируется, если нужно.
  - список объектов-задач из движка возвращается вызывающему коду.
  - далее приложение должно вывести весь список тодо-задач на экран в правильном виде.
    - todo: надо определить способ представления задач пользователю.    

   