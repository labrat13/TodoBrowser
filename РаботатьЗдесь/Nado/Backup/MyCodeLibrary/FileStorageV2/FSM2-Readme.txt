Это подсистема хранилища файлов для приложения.
- TODO: Ее надо описать лучше.
- TODO: Надо переработать внешний интерфейс и область видимости функций. 
   Сейчас они вывернуты наизнанку для облегчения тестов


25 сент 2015
- Добавлен класс ShellFileOperations для лучшей поддержки файловых операций
  - deleteFile может удалять файл или каталог в корзину
  - moveFile перемещает HTML-файлы вместе с папками картинок
  - функции могут показывать диалог прогресса и отмену операции.
  - но это все надо настроить и тестировать. 
- сделана и проверена большая часть функций обвязки.
- надо сделать функции добавления, но для них нужен алгоритм
  - алгоритм наверчен, но теперь надо его тестировать. а тест должен быть большой и толстый, ибо хранилище просто огромных размеров.
    - Надо придумать автоматический тест с логгером, этак на пару часов работы.
- надо придумать как передавать события для индикатора прогресса.
- функции создания БД избыточны
- функция удаления пустых каталогов должна удалять пустые каталоги Хранилища 1 и 2 уровней. Но она не может это сделать так просто.
  - Это нужно выявить и удалить пустые каталоги Хранилища 2 уровня, потом пустые каталоги Хранилища 1 уровня.
  - Именно каталоги Хранилища, а не любые пустые каталоги - сделать проверку по имени каталога. 
- функция создания путей должна создавать папки с атрибутом отмены индексации.
  - может быть, достаточно будет только в основных каталогах отменить индексацию?
  - в ShellFileOperation функции надо добавить смену атрибута индексации для создаваемых папок.
- Функции добавления файлов не учитывают флаг ридонли, поэтому сейчас нельзя запретить добавление или удаление файлов
  - надо продумать процессы и расставить все блокировки где они нужны.
- Надо переописать сценарии использования хранилища, поскольку многое изменилось
- Надо в коде отделить собственно функции хранилища от разных ДоКучиФункций.       
- функции проверки существования и записываемости Хранилища недостаточно проработаны в плане их взаимодействия.
- надо сделать и тестировать функции упаковки и распаковки
- надо изменить видимость функций менеджера после тестирования
- надо уточнить терминологию в части относительных путей файлов - там неувязки.
- надо написать документацию везде в коде и краткие примеры использования. 
- предложен быстрый способ поиска места с помощью ГСЧ. Надо исследовать этот способ, чтобы построить быстрый, но вместительный менеджер.

26 сент 2015
- Имена папок, которые зарезервированы ос: AUX CON NUL PRN. 
  - Эти имена нельзя давать папкам Хранилища, значит надо их находить и перезапускать генератор в таком случае.
  - Можно пропускать итерации с ними, но не все итерации можно пропустить - надо переделывать код движка.
    - функция проверки должна проверять имена или идентификаторы? Выбрано: имена. 
      - можно и то и другое, но имена дольше проверять, а идентификаторы полезны только в коде движка.
      + public static bool isNameNotReserved(string foldername) добавлена в FileStorageManager. 
        В коде Хранилища не нужна, но может пригодиться приложению при генерации имен файлов.   
  - Можно заменять буквы в этих именах, но на что? И тогда весь этот стройный код подсистемы идентификаторов никуда не годится.
    - Проверка имен папок на символы будет косячить с этими именами. А обходить это - лишняя заморочка, и она где-нибудь вылезет боком.
    - Можно предложить использовать два или четыре символа. 4 нельзя - в папку не влезут. 2 = 26*26=676 подпапок. 456976 папок в двухуровневой схеме.
       Зато тормозить меньше будет. 450мли файлов при 456тыс одинаковых - нормально.
    - Выбрано: двухсимвольные имена папок, 2 уровня папок, 1024 файла в конечной папке, создание нового пути по рандомайзеру, потом обходом.
      + проверено, что двухсимвольные имена не имеют проблем в путях.   
- Проблема сейчас с папками, имена которых совпадают с именами папок хранилища: 
   Папка будет добавлена в подкаталог первого уровня, потом движок посчитает ее 
    папкой Хранилища и будет добавлять туда новые файлы. 
    И предупредить это слишком сложно, чтобы возиться дальше.
    Поэтому просто надо не создавать подпапки Хранилища рядом с содержимым Хранилища, 
    так можно гарантировать целостность, но нельзя гарантировать полное использование пространства имен Хранилища.
    Да и хрен с ним, с пространством имен. Нужен движок Хранилища, пригодный для хранения файлов.
- слишком сложно получается с движком разбираться
  - предлагается переделать весь код на 2 варианта:
    - А) один уровень подпапок AA..ZZ
      - малый набор на 676*1024 файлов при 676 одинаковых файлов. Это покроет часть применений.
      - выбор нового места сначала случайный, потом последовательным перебором.
      - папки и файлы добавляются как есть, они находятся в подпапке и никаких там "может быть" не будет.
    + Б) два уровня подпапок AA..ZZ
      - пользовательские файлы и папки только в папках второго уровня 
      - большой набор на 456976*1024 файлов при 456976 одинаковых файлов. Это покроет большинство применений.
      - выбор нового места сначала случайный - по двум случайно выбираемым папкам, потом последовательным перебором.
      - папки и файлы добавляются как есть, они находятся в подпапке и никаких там "может быть" не будет.      
    - Это два похожих класса хранилища. Устройство очень простое, схожее, легко переделать и контролировать и переносить. 
    
 28 сент 2015
 - Класс FileStorageManagerV2 почти готов, надо тестировать.
    - Надо события для прогрессбара сделать и протестировать.
    - Надо заменить исключения на более специальные, создать их если не найдется подходящих.
   - После теста надо смоделировать использование хранилища в приложении - написать весь процесс.
   - После теста надо провести оптимизацию, имена пошлифовать, сгенерить документацию и исправить и примеры написать.
   - И вики надо переделать на новый порядок, лишнее выкинуть. 
      Или вообще тексты из вики внести в справочную документацию по модулю? А саму вики не сносить - пригодится в следующих версиях модуля.

30 сент 2015	
- менеджер на данном этапе можно считать готовым для применения в приложении.
  В приложении и будем его обкатывать и допиливать.
  - добавить поиск одинаковых файлов по хешу - это существенная переделка.
  - пошлифовать функции проверки и создания хранилища - там сейчас бардак.
  - сделать нормальные межпоточные события для прогрессбара - сейчас негде их тестировать.
  - добавить функции упаковки и распаковки.
  - сделать документацию на модуль - сейчас никак - документатор не интегрировался со студией.
  
19 окт 2015
- Опробовал генератор документации.
  - создается chm-файл
  - документация с русскими описаниями генерируется, хотя и долго
  - в свойствах документируемого проекта надо поставить галочку Генерировать ХМЛ описаний
    Иначе описаний не будет.
  - в целом все хорошо, но описания функций надо сразу писать специально для этой справки.
    А сейчас они выглядят  нехорошо. После того как я привык к МСДН, тут сразу выпирают все косяки.    
       
06 января 2020
- класс извлечен из первоначального проекта и добавлен в мою библиотеку классов.
  Хотя он все еще требует доработки, но первые попытки его пригладить и скруглить уже были сделаны.
  - вместе с ним был принесен и класс TestUsing, который должен служить примером использовия и теста подсистемы.
- было проведено тестирование, код успешно создал хранилище и впихал в него двенадцать копий набора исходных файлов.
  Одиннадцать в режиме ДобавитьЗаново, и один - ДобавитьЕслиНеСуществует.
  Исключений не возникло. Правильность и доступность файлов я не проверял.
- Класс требует доработки:
  - Надо реализовать функцию сравнения каталогов - она используется, но не реализована сейчас. Заглушка стоит.
  - Надо убрать неиспользуемые функции - их несколько заготовлено на будущее.
  - Надо переработать внешний набор функций подсистемы. Сейчас оно лохмато все. 
     Надо сделать более интуитивно понятно и удобно.
  - Надо перевести код на использование уже существующих функций библиотеки.
    Это можно сделать не везде, так как собственная реализация более специфична или лучше, чем в CFileOperations.
    Так что надо взять лучшее из обоих миров.              